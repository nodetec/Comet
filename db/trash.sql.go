// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: trash.sql

package db

import (
	"context"
	"database/sql"
)

const addNoteToTrash = `-- name: AddNoteToTrash :one
INSERT INTO
  trash (
    note_id,
    content,
    title,
    created_at,
    modified_at,
    tags,
    notebook_id,
    published_at,
    event_id,
    notetype,
    filetype
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id,
  note_id,
  content,
  title,
  created_at,
  modified_at,
  tags,
  notebook_id,
  published_at,
  event_id,
  notetype,
  filetype
`

type AddNoteToTrashParams struct {
	NoteID      int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	Tags        sql.NullString
	NotebookID  int64
	PublishedAt sql.NullString
	EventID     sql.NullString
	Notetype    string
	Filetype    string
}

type AddNoteToTrashRow struct {
	ID          int64
	NoteID      int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	Tags        sql.NullString
	NotebookID  int64
	PublishedAt sql.NullString
	EventID     sql.NullString
	Notetype    string
	Filetype    string
}

// Trashed Note Queries
func (q *Queries) AddNoteToTrash(ctx context.Context, arg AddNoteToTrashParams) (AddNoteToTrashRow, error) {
	row := q.db.QueryRowContext(ctx, addNoteToTrash,
		arg.NoteID,
		arg.Content,
		arg.Title,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.Tags,
		arg.NotebookID,
		arg.PublishedAt,
		arg.EventID,
		arg.Notetype,
		arg.Filetype,
	)
	var i AddNoteToTrashRow
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Tags,
		&i.NotebookID,
		&i.PublishedAt,
		&i.EventID,
		&i.Notetype,
		&i.Filetype,
	)
	return i, err
}

const deleteNoteFromTrash = `-- name: DeleteNoteFromTrash :exec
DELETE FROM trash
WHERE
  id = ?
`

func (q *Queries) DeleteNoteFromTrash(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNoteFromTrash, id)
	return err
}

const getNoteFromTrash = `-- name: GetNoteFromTrash :one
SELECT
  id,
  note_id,
  content,
  title,
  created_at,
  modified_at,
  tags,
  notebook_id,
  published_at,
  event_id,
  notetype,
  filetype
FROM
  trash
WHERE
  id = ?
`

type GetNoteFromTrashRow struct {
	ID          int64
	NoteID      int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	Tags        sql.NullString
	NotebookID  int64
	PublishedAt sql.NullString
	EventID     sql.NullString
	Notetype    string
	Filetype    string
}

func (q *Queries) GetNoteFromTrash(ctx context.Context, id int64) (GetNoteFromTrashRow, error) {
	row := q.db.QueryRowContext(ctx, getNoteFromTrash, id)
	var i GetNoteFromTrashRow
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Tags,
		&i.NotebookID,
		&i.PublishedAt,
		&i.EventID,
		&i.Notetype,
		&i.Filetype,
	)
	return i, err
}
