// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: settings.sql

package db

import (
	"context"
	"database/sql"
)

const createSetting = `-- name: CreateSetting :one
INSERT INTO
  settings (key, value)
VALUES
  (?, ?) RETURNING key,
  value
`

type CreateSettingParams struct {
	Key   string
	Value sql.NullString
}

// Settings Queries
func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSetting, arg.Key, arg.Value)
	var i Setting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE
  key = ?
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSetting, key)
	return err
}

const getSetting = `-- name: GetSetting :one
SELECT
  key,
  value
FROM
  settings
WHERE
  key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var i Setting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings
SET
  value = ?
WHERE
  key = ?
`

type UpdateSettingParams struct {
	Value sql.NullString
	Key   string
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Value, arg.Key)
	return err
}
