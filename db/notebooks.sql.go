// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notebooks.sql

package db

import (
	"context"
)

const createNotebook = `-- name: CreateNotebook :one
INSERT INTO
  notebooks (name, created_at)
VALUES
  (?, ?) RETURNING id,
  name,
  created_at
`

type CreateNotebookParams struct {
	Name      string
	CreatedAt string
}

// Notebook Queries
func (q *Queries) CreateNotebook(ctx context.Context, arg CreateNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, createNotebook, arg.Name, arg.CreatedAt)
	var i Notebook
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteNotebook = `-- name: DeleteNotebook :exec
DELETE FROM notebooks
WHERE
  id = ?
`

func (q *Queries) DeleteNotebook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNotebook, id)
	return err
}

const getNotebook = `-- name: GetNotebook :one
SELECT
  id,
  name,
  created_at
FROM
  notebooks
WHERE
  id = ?
`

func (q *Queries) GetNotebook(ctx context.Context, id int64) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, getNotebook, id)
	var i Notebook
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listNotebooks = `-- name: ListNotebooks :many
SELECT
  id,
  name,
  created_at
FROM
  notebooks
`

func (q *Queries) ListNotebooks(ctx context.Context) ([]Notebook, error) {
	rows, err := q.db.QueryContext(ctx, listNotebooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notebook
	for rows.Next() {
		var i Notebook
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotebook = `-- name: UpdateNotebook :exec
UPDATE notebooks
SET
  name = ?,
  created_at = ?
WHERE
  id = ?
`

type UpdateNotebookParams struct {
	Name      string
	CreatedAt string
	ID        int64
}

func (q *Queries) UpdateNotebook(ctx context.Context, arg UpdateNotebookParams) error {
	_, err := q.db.ExecContext(ctx, updateNotebook, arg.Name, arg.CreatedAt, arg.ID)
	return err
}
