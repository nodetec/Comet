// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notes.sql

package db

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO
  notes (
    status_id,
    notebook_id,
    content,
    title,
    created_at,
    modified_at,
    published_at,
    event_id,
    pinned,
    notetype,
    filetype
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id,
  status_id,
  notebook_id,
  content,
  title,
  created_at,
  modified_at,
  published_at,
  event_id,
  pinned,
  notetype,
  filetype
`

type CreateNoteParams struct {
	StatusID    sql.NullInt64
	NotebookID  int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	PublishedAt sql.NullString
	EventID     sql.NullString
	Pinned      bool
	Notetype    string
	Filetype    string
}

// Note Queries
func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote,
		arg.StatusID,
		arg.NotebookID,
		arg.Content,
		arg.Title,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.PublishedAt,
		arg.EventID,
		arg.Pinned,
		arg.Notetype,
		arg.Filetype,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.StatusID,
		&i.NotebookID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.PublishedAt,
		&i.EventID,
		&i.Pinned,
		&i.Notetype,
		&i.Filetype,
	)
	return i, err
}

const createNoteFromTrash = `-- name: CreateNoteFromTrash :one
INSERT INTO
  notes (
    id,
    status_id,
    notebook_id,
    content,
    title,
    created_at,
    modified_at,
    published_at,
    event_id,
    pinned,
    notetype,
    filetype
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id,
  id,
  status_id,
  notebook_id,
  content,
  title,
  created_at,
  modified_at,
  published_at,
  event_id,
  pinned,
  notetype,
  filetype
`

type CreateNoteFromTrashParams struct {
	ID          int64
	StatusID    sql.NullInt64
	NotebookID  int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	PublishedAt sql.NullString
	EventID     sql.NullString
	Pinned      bool
	Notetype    string
	Filetype    string
}

type CreateNoteFromTrashRow struct {
	ID          int64
	ID_2        int64
	StatusID    sql.NullInt64
	NotebookID  int64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	PublishedAt sql.NullString
	EventID     sql.NullString
	Pinned      bool
	Notetype    string
	Filetype    string
}

func (q *Queries) CreateNoteFromTrash(ctx context.Context, arg CreateNoteFromTrashParams) (CreateNoteFromTrashRow, error) {
	row := q.db.QueryRowContext(ctx, createNoteFromTrash,
		arg.ID,
		arg.StatusID,
		arg.NotebookID,
		arg.Content,
		arg.Title,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.PublishedAt,
		arg.EventID,
		arg.Pinned,
		arg.Notetype,
		arg.Filetype,
	)
	var i CreateNoteFromTrashRow
	err := row.Scan(
		&i.ID,
		&i.ID_2,
		&i.StatusID,
		&i.NotebookID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.PublishedAt,
		&i.EventID,
		&i.Pinned,
		&i.Notetype,
		&i.Filetype,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE
  id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT
  id,
  status_id,
  notebook_id,
  content,
  title,
  created_at,
  modified_at,
  published_at,
  event_id,
  pinned,
  notetype,
  filetype
FROM
  notes
WHERE
  id = ?
`

func (q *Queries) GetNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.StatusID,
		&i.NotebookID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.PublishedAt,
		&i.EventID,
		&i.Pinned,
		&i.Notetype,
		&i.Filetype,
	)
	return i, err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET
  status_id = ?,
  notebook_id = ?,
  content = ?,
  title = ?,
  modified_at = ?,
  published_at = ?,
  event_id = ?,
  pinned = ?,
  notetype = ?,
  filetype = ?
WHERE
  id = ?
`

type UpdateNoteParams struct {
	StatusID    sql.NullInt64
	NotebookID  int64
	Content     string
	Title       string
	ModifiedAt  string
	PublishedAt sql.NullString
	EventID     sql.NullString
	Pinned      bool
	Notetype    string
	Filetype    string
	ID          int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote,
		arg.StatusID,
		arg.NotebookID,
		arg.Content,
		arg.Title,
		arg.ModifiedAt,
		arg.PublishedAt,
		arg.EventID,
		arg.Pinned,
		arg.Notetype,
		arg.Filetype,
		arg.ID,
	)
	return err
}
