// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: relay.sql

package db

import (
	"context"
)

const createRelay = `-- name: CreateRelay :one
INSERT INTO
  relay (url, read, write, sync, created_at, modified_at)
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id,
  url,
  read,
  write,
  sync,
  created_at,
  modified_at
`

type CreateRelayParams struct {
	Url        string
	Read       bool
	Write      bool
	Sync       bool
	CreatedAt  string
	ModifiedAt string
}

// Relay Queries
func (q *Queries) CreateRelay(ctx context.Context, arg CreateRelayParams) (Relay, error) {
	row := q.db.QueryRowContext(ctx, createRelay,
		arg.Url,
		arg.Read,
		arg.Write,
		arg.Sync,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i Relay
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Read,
		&i.Write,
		&i.Sync,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteRelay = `-- name: DeleteRelay :exec
DELETE FROM relay WHERE id = ?
`

func (q *Queries) DeleteRelay(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRelay, id)
	return err
}

const getRelay = `-- name: GetRelay :one
SELECT id, url, read, write, sync, created_at, modified_at FROM relay WHERE id = ?
`

func (q *Queries) GetRelay(ctx context.Context, id int64) (Relay, error) {
	row := q.db.QueryRowContext(ctx, getRelay, id)
	var i Relay
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Read,
		&i.Write,
		&i.Sync,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listRelays = `-- name: ListRelays :many
SELECT id, url, read, write, sync, created_at, modified_at FROM relay
`

func (q *Queries) ListRelays(ctx context.Context) ([]Relay, error) {
	rows, err := q.db.QueryContext(ctx, listRelays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Relay
	for rows.Next() {
		var i Relay
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Read,
			&i.Write,
			&i.Sync,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRelay = `-- name: UpdateRelay :exec
UPDATE relay SET url = ?, read = ?, write = ?, sync = ?, created_at = ?, modified_at = ? WHERE id = ?
`

type UpdateRelayParams struct {
	Url        string
	Read       bool
	Write      bool
	Sync       bool
	CreatedAt  string
	ModifiedAt string
	ID         int64
}

func (q *Queries) UpdateRelay(ctx context.Context, arg UpdateRelayParams) error {
	_, err := q.db.ExecContext(ctx, updateRelay,
		arg.Url,
		arg.Read,
		arg.Write,
		arg.Sync,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.ID,
	)
	return err
}
