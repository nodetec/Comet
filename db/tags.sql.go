// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tags.sql

package db

import (
	"context"
	"database/sql"
)

const createTag = `-- name: CreateTag :one
INSERT INTO
  tags (name, color, icon, created_at)
VALUES
  (?, ?, ?, ?) RETURNING id,
  name,
  color,
  icon,
  created_at
`

type CreateTagParams struct {
	Name      string
	Color     sql.NullString
	Icon      sql.NullString
	CreatedAt string
}

// Tag Queries
func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag,
		arg.Name,
		arg.Color,
		arg.Icon,
		arg.CreatedAt,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE
  id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT
  id,
  name,
  color,
  icon,
  created_at
FROM
  tags
WHERE
  id = ?
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, color, icon, created_at
FROM tags
WHERE name = ?
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
	)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT
  id,
  name,
  color,
  icon,
  created_at
FROM
  tags
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET
  name = ?,
  color = ?,
  icon = ?,
  created_at = ?
WHERE
  id = ?
`

type UpdateTagParams struct {
	Name      string
	Color     sql.NullString
	Icon      sql.NullString
	CreatedAt string
	ID        int64
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag,
		arg.Name,
		arg.Color,
		arg.Icon,
		arg.CreatedAt,
		arg.ID,
	)
	return err
}
