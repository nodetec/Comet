// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notebook_tags.sql

package db

import (
	"context"
	"database/sql"
)

const addTagToNotebook = `-- name: AddTagToNotebook :exec
INSERT INTO
  notebook_tags (notebook_id, tag_id)
VALUES
  (?, ?)
`

type AddTagToNotebookParams struct {
	NotebookID sql.NullInt64
	TagID      sql.NullInt64
}

// Notebook-Tag Junction Table Queries
func (q *Queries) AddTagToNotebook(ctx context.Context, arg AddTagToNotebookParams) error {
	_, err := q.db.ExecContext(ctx, addTagToNotebook, arg.NotebookID, arg.TagID)
	return err
}

const checkTagForNotebook = `-- name: CheckTagForNotebook :one
SELECT
  COUNT(*) > 0 AS is_associated
FROM
  notebook_tags
WHERE
  notebook_id = ?
  AND tag_id = ?
`

type CheckTagForNotebookParams struct {
	NotebookID sql.NullInt64
	TagID      sql.NullInt64
}

func (q *Queries) CheckTagForNotebook(ctx context.Context, arg CheckTagForNotebookParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTagForNotebook, arg.NotebookID, arg.TagID)
	var is_associated bool
	err := row.Scan(&is_associated)
	return is_associated, err
}

const getTagsForNotebook = `-- name: GetTagsForNotebook :many
SELECT
  t.id,
  t.name,
  t.color,
  t.icon,
  t.created_at
FROM
  tags t
  JOIN notebook_tags nt ON t.id = nt.tag_id
WHERE
  nt.notebook_id = ?
`

func (q *Queries) GetTagsForNotebook(ctx context.Context, notebookID sql.NullInt64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForNotebook, notebookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllTagsFromNotebook = `-- name: RemoveAllTagsFromNotebook :exec
DELETE FROM notebook_tags
WHERE
  notebook_id = ?
`

func (q *Queries) RemoveAllTagsFromNotebook(ctx context.Context, notebookID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, removeAllTagsFromNotebook, notebookID)
	return err
}

const removeTagFromNotebook = `-- name: RemoveTagFromNotebook :exec
DELETE FROM notebook_tags
WHERE
  notebook_id = ?
  AND tag_id = ?
`

type RemoveTagFromNotebookParams struct {
	NotebookID sql.NullInt64
	TagID      sql.NullInt64
}

func (q *Queries) RemoveTagFromNotebook(ctx context.Context, arg RemoveTagFromNotebookParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromNotebook, arg.NotebookID, arg.TagID)
	return err
}
