// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: nostr_keys.sql

package db

import (
	"context"
)

const createNostrKey = `-- name: CreateNostrKey :one
INSERT INTO
  nostr_keys (nsec, npub, active, created_at, modified_at)
VALUES
  (?, ?, ?, ?, ?) RETURNING id,
  nsec,
  npub,
  active,
  created_at,
  modified_at
`

type CreateNostrKeyParams struct {
	Nsec       string
	Npub       string
	Active     bool
	CreatedAt  string
	ModifiedAt string
}

// NostrKey Queries
func (q *Queries) CreateNostrKey(ctx context.Context, arg CreateNostrKeyParams) (NostrKey, error) {
	row := q.db.QueryRowContext(ctx, createNostrKey,
		arg.Nsec,
		arg.Npub,
		arg.Active,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i NostrKey
	err := row.Scan(
		&i.ID,
		&i.Nsec,
		&i.Npub,
		&i.Active,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteNostrKey = `-- name: DeleteNostrKey :exec
DELETE FROM nostr_keys WHERE id = ?
`

func (q *Queries) DeleteNostrKey(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNostrKey, id)
	return err
}

const getNostrKey = `-- name: GetNostrKey :one
SELECT id, nsec, npub, active, created_at, modified_at FROM nostr_keys WHERE id = ?
`

func (q *Queries) GetNostrKey(ctx context.Context, id int64) (NostrKey, error) {
	row := q.db.QueryRowContext(ctx, getNostrKey, id)
	var i NostrKey
	err := row.Scan(
		&i.ID,
		&i.Nsec,
		&i.Npub,
		&i.Active,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listNostrKeys = `-- name: ListNostrKeys :many
SELECT id, nsec, npub, active, created_at, modified_at FROM nostr_keys
`

func (q *Queries) ListNostrKeys(ctx context.Context) ([]NostrKey, error) {
	rows, err := q.db.QueryContext(ctx, listNostrKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NostrKey
	for rows.Next() {
		var i NostrKey
		if err := rows.Scan(
			&i.ID,
			&i.Nsec,
			&i.Npub,
			&i.Active,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNostrKey = `-- name: UpdateNostrKey :exec
UPDATE nostr_keys SET nsec = ?, npub = ?, active = ?, created_at = ?, modified_at = ? WHERE id = ?
`

type UpdateNostrKeyParams struct {
	Nsec       string
	Npub       string
	Active     bool
	CreatedAt  string
	ModifiedAt string
	ID         int64
}

func (q *Queries) UpdateNostrKey(ctx context.Context, arg UpdateNostrKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateNostrKey,
		arg.Nsec,
		arg.Npub,
		arg.Active,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.ID,
	)
	return err
}
