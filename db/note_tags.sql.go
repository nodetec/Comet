// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: note_tags.sql

package db

import (
	"context"
	"database/sql"
)

const addTagToNote = `-- name: AddTagToNote :exec
INSERT INTO
  note_tags (note_id, tag_id)
VALUES
  (?, ?)
`

type AddTagToNoteParams struct {
	NoteID sql.NullInt64
	TagID  sql.NullInt64
}

// Note-Tag Junction Table Queries
func (q *Queries) AddTagToNote(ctx context.Context, arg AddTagToNoteParams) error {
	_, err := q.db.ExecContext(ctx, addTagToNote, arg.NoteID, arg.TagID)
	return err
}

const checkTagForNote = `-- name: CheckTagForNote :one
SELECT
  COUNT(*) > 0 AS is_associated
FROM
  note_tags
WHERE
  note_id = ?
  AND tag_id = ?
`

type CheckTagForNoteParams struct {
	NoteID sql.NullInt64
	TagID  sql.NullInt64
}

func (q *Queries) CheckTagForNote(ctx context.Context, arg CheckTagForNoteParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTagForNote, arg.NoteID, arg.TagID)
	var is_associated bool
	err := row.Scan(&is_associated)
	return is_associated, err
}

const getTagsForNote = `-- name: GetTagsForNote :many
SELECT
  t.id,
  t.name,
  t.color,
  t.icon,
  t.created_at
FROM
  tags t
  JOIN note_tags nt ON t.id = nt.tag_id
WHERE
  nt.note_id = ?
`

func (q *Queries) GetTagsForNote(ctx context.Context, noteID sql.NullInt64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForNote, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllTagsFromNote = `-- name: RemoveAllTagsFromNote :exec
DELETE FROM note_tags
WHERE
  note_id = ?
`

func (q *Queries) RemoveAllTagsFromNote(ctx context.Context, noteID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, removeAllTagsFromNote, noteID)
	return err
}

const removeTagFromNote = `-- name: RemoveTagFromNote :exec

DELETE FROM note_tags
WHERE
  note_id = ?
  AND tag_id = ?
`

type RemoveTagFromNoteParams struct {
	NoteID sql.NullInt64
	TagID  sql.NullInt64
}

// -- name: GetNotesForTag :many
// SELECT
//
//	n.id,
//	n.status_id,
//	n.notebook_id,
//	n.content,
//	n.title,
//	n.created_at,
//	n.modified_at,
//	n.published_at,
//	n.event_id
//
// FROM
//
//	notes n
//	JOIN note_tags nt ON n.id = nt.note_id
//
// WHERE
//
//	nt.tag_id = ?
//
// LIMIT
//
//	?
//
// OFFSET
//
//	?;
func (q *Queries) RemoveTagFromNote(ctx context.Context, arg RemoveTagFromNoteParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromNote, arg.NoteID, arg.TagID)
	return err
}
