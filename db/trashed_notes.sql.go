// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: trashed_notes.sql

package db

import (
	"context"
	"database/sql"
)

const deleteTrashedNote = `-- name: DeleteTrashedNote :exec
DELETE FROM trashed_notes
WHERE
  id = ?
`

func (q *Queries) DeleteTrashedNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrashedNote, id)
	return err
}

const getTrashedNote = `-- name: GetTrashedNote :one
SELECT
  id,
  note_id,
  content,
  created_at,
  trashed_at
FROM
  trashed_notes
WHERE
  id = ?
`

func (q *Queries) GetTrashedNote(ctx context.Context, id int64) (TrashedNote, error) {
	row := q.db.QueryRowContext(ctx, getTrashedNote, id)
	var i TrashedNote
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.Content,
		&i.CreatedAt,
		&i.TrashedAt,
	)
	return i, err
}

const listTrashedNotes = `-- name: ListTrashedNotes :many
SELECT
  id,
  note_id,
  content,
  created_at,
  trashed_at
FROM
  trashed_notes
`

func (q *Queries) ListTrashedNotes(ctx context.Context) ([]TrashedNote, error) {
	rows, err := q.db.QueryContext(ctx, listTrashedNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrashedNote
	for rows.Next() {
		var i TrashedNote
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.Content,
			&i.CreatedAt,
			&i.TrashedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trashNote = `-- name: TrashNote :exec
INSERT INTO
  trashed_notes (note_id, content, created_at, trashed_at)
VALUES
  (?, ?, ?, ?) RETURNING id,
  note_id,
  content,
  created_at,
  trashed_at
`

type TrashNoteParams struct {
	NoteID    sql.NullInt64
	Content   string
	CreatedAt string
	TrashedAt string
}

// Trashed Note Queries
func (q *Queries) TrashNote(ctx context.Context, arg TrashNoteParams) error {
	_, err := q.db.ExecContext(ctx, trashNote,
		arg.NoteID,
		arg.Content,
		arg.CreatedAt,
		arg.TrashedAt,
	)
	return err
}
