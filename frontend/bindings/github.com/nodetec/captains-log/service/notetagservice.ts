// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as db$0 from "../db/models.js";

export function AddTagToNote(noteID: number, tagID: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(674475180, noteID, tagID) as any;
    return $resultPromise;
}

export function CheckTagForNote(noteID: number, tagID: number): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2860258327, noteID, tagID) as any;
    return $resultPromise;
}

export function GetNotesForTag(tagID: number, limit: number, pageParam: number): Promise<db$0.Note[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1319145372, tagID, limit, pageParam) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetTagsForNote(noteID: number): Promise<db$0.Tag[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(385519868, noteID) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function RemoveTagFromNote(noteID: number, tagID: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1414310996, noteID, tagID) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = db$0.Note.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = db$0.Tag.createFrom;
const $$createType3 = $Create.Array($$createType2);
