// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as sql$0 from "../../../../database/sql/models.js";

export class CreateNoteFromTrashRow {
    "ID": number;
    "ID_2": number;
    "StatusID": sql$0.NullInt64;
    "NotebookID": number;
    "Content": string;
    "Title": string;
    "CreatedAt": string;
    "ModifiedAt": string;
    "PublishedAt": sql$0.NullString;
    "EventID": sql$0.NullString;
    "Pinned": boolean;
    "Notetype": string;
    "Filetype": string;

    /** Creates a new CreateNoteFromTrashRow instance. */
    constructor($$source: Partial<CreateNoteFromTrashRow> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("ID_2" in $$source)) {
            this["ID_2"] = 0;
        }
        if (!("StatusID" in $$source)) {
            this["StatusID"] = (new sql$0.NullInt64());
        }
        if (!("NotebookID" in $$source)) {
            this["NotebookID"] = 0;
        }
        if (!("Content" in $$source)) {
            this["Content"] = "";
        }
        if (!("Title" in $$source)) {
            this["Title"] = "";
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }
        if (!("ModifiedAt" in $$source)) {
            this["ModifiedAt"] = "";
        }
        if (!("PublishedAt" in $$source)) {
            this["PublishedAt"] = (new sql$0.NullString());
        }
        if (!("EventID" in $$source)) {
            this["EventID"] = (new sql$0.NullString());
        }
        if (!("Pinned" in $$source)) {
            this["Pinned"] = false;
        }
        if (!("Notetype" in $$source)) {
            this["Notetype"] = "";
        }
        if (!("Filetype" in $$source)) {
            this["Filetype"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CreateNoteFromTrashRow instance from a string or object.
     */
    static createFrom($$source: any = {}): CreateNoteFromTrashRow {
        const $$createField2_0 = $$createType0;
        const $$createField8_0 = $$createType1;
        const $$createField9_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("StatusID" in $$parsedSource) {
            $$parsedSource["StatusID"] = $$createField2_0($$parsedSource["StatusID"]);
        }
        if ("PublishedAt" in $$parsedSource) {
            $$parsedSource["PublishedAt"] = $$createField8_0($$parsedSource["PublishedAt"]);
        }
        if ("EventID" in $$parsedSource) {
            $$parsedSource["EventID"] = $$createField9_0($$parsedSource["EventID"]);
        }
        return new CreateNoteFromTrashRow($$parsedSource as Partial<CreateNoteFromTrashRow>);
    }
}

export class GetNoteFromTrashRow {
    "ID": number;
    "NoteID": number;
    "Content": string;
    "Title": string;
    "CreatedAt": string;
    "ModifiedAt": string;
    "Tags": sql$0.NullString;
    "NotebookID": number;
    "PublishedAt": sql$0.NullString;
    "EventID": sql$0.NullString;
    "Notetype": string;
    "Filetype": string;

    /** Creates a new GetNoteFromTrashRow instance. */
    constructor($$source: Partial<GetNoteFromTrashRow> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("NoteID" in $$source)) {
            this["NoteID"] = 0;
        }
        if (!("Content" in $$source)) {
            this["Content"] = "";
        }
        if (!("Title" in $$source)) {
            this["Title"] = "";
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }
        if (!("ModifiedAt" in $$source)) {
            this["ModifiedAt"] = "";
        }
        if (!("Tags" in $$source)) {
            this["Tags"] = (new sql$0.NullString());
        }
        if (!("NotebookID" in $$source)) {
            this["NotebookID"] = 0;
        }
        if (!("PublishedAt" in $$source)) {
            this["PublishedAt"] = (new sql$0.NullString());
        }
        if (!("EventID" in $$source)) {
            this["EventID"] = (new sql$0.NullString());
        }
        if (!("Notetype" in $$source)) {
            this["Notetype"] = "";
        }
        if (!("Filetype" in $$source)) {
            this["Filetype"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GetNoteFromTrashRow instance from a string or object.
     */
    static createFrom($$source: any = {}): GetNoteFromTrashRow {
        const $$createField6_0 = $$createType1;
        const $$createField8_0 = $$createType1;
        const $$createField9_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Tags" in $$parsedSource) {
            $$parsedSource["Tags"] = $$createField6_0($$parsedSource["Tags"]);
        }
        if ("PublishedAt" in $$parsedSource) {
            $$parsedSource["PublishedAt"] = $$createField8_0($$parsedSource["PublishedAt"]);
        }
        if ("EventID" in $$parsedSource) {
            $$parsedSource["EventID"] = $$createField9_0($$parsedSource["EventID"]);
        }
        return new GetNoteFromTrashRow($$parsedSource as Partial<GetNoteFromTrashRow>);
    }
}

export class Note {
    "ID": number;
    "StatusID": sql$0.NullInt64;
    "NotebookID": number;
    "Content": string;
    "Title": string;
    "CreatedAt": string;
    "ModifiedAt": string;
    "PublishedAt": sql$0.NullString;
    "EventID": sql$0.NullString;
    "Pinned": boolean;
    "Notetype": string;
    "Filetype": string;

    /** Creates a new Note instance. */
    constructor($$source: Partial<Note> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("StatusID" in $$source)) {
            this["StatusID"] = (new sql$0.NullInt64());
        }
        if (!("NotebookID" in $$source)) {
            this["NotebookID"] = 0;
        }
        if (!("Content" in $$source)) {
            this["Content"] = "";
        }
        if (!("Title" in $$source)) {
            this["Title"] = "";
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }
        if (!("ModifiedAt" in $$source)) {
            this["ModifiedAt"] = "";
        }
        if (!("PublishedAt" in $$source)) {
            this["PublishedAt"] = (new sql$0.NullString());
        }
        if (!("EventID" in $$source)) {
            this["EventID"] = (new sql$0.NullString());
        }
        if (!("Pinned" in $$source)) {
            this["Pinned"] = false;
        }
        if (!("Notetype" in $$source)) {
            this["Notetype"] = "";
        }
        if (!("Filetype" in $$source)) {
            this["Filetype"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Note instance from a string or object.
     */
    static createFrom($$source: any = {}): Note {
        const $$createField1_0 = $$createType0;
        const $$createField7_0 = $$createType1;
        const $$createField8_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("StatusID" in $$parsedSource) {
            $$parsedSource["StatusID"] = $$createField1_0($$parsedSource["StatusID"]);
        }
        if ("PublishedAt" in $$parsedSource) {
            $$parsedSource["PublishedAt"] = $$createField7_0($$parsedSource["PublishedAt"]);
        }
        if ("EventID" in $$parsedSource) {
            $$parsedSource["EventID"] = $$createField8_0($$parsedSource["EventID"]);
        }
        return new Note($$parsedSource as Partial<Note>);
    }
}

export class Notebook {
    "ID": number;
    "Name": string;
    "CreatedAt": string;

    /** Creates a new Notebook instance. */
    constructor($$source: Partial<Notebook> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Notebook instance from a string or object.
     */
    static createFrom($$source: any = {}): Notebook {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Notebook($$parsedSource as Partial<Notebook>);
    }
}

export class Tag {
    "ID": number;
    "Name": string;
    "Color": sql$0.NullString;
    "Icon": sql$0.NullString;
    "CreatedAt": string;

    /** Creates a new Tag instance. */
    constructor($$source: Partial<Tag> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Color" in $$source)) {
            this["Color"] = (new sql$0.NullString());
        }
        if (!("Icon" in $$source)) {
            this["Icon"] = (new sql$0.NullString());
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Tag instance from a string or object.
     */
    static createFrom($$source: any = {}): Tag {
        const $$createField2_0 = $$createType1;
        const $$createField3_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Color" in $$parsedSource) {
            $$parsedSource["Color"] = $$createField2_0($$parsedSource["Color"]);
        }
        if ("Icon" in $$parsedSource) {
            $$parsedSource["Icon"] = $$createField3_0($$parsedSource["Icon"]);
        }
        return new Tag($$parsedSource as Partial<Tag>);
    }
}

export class Trash {
    "ID": number;
    "NoteID": number;
    "NotebookID": number;
    "Content": string;
    "Title": string;
    "CreatedAt": string;
    "ModifiedAt": string;
    "Tags": sql$0.NullString;
    "PublishedAt": sql$0.NullString;
    "EventID": sql$0.NullString;
    "Notetype": string;
    "Filetype": string;

    /** Creates a new Trash instance. */
    constructor($$source: Partial<Trash> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("NoteID" in $$source)) {
            this["NoteID"] = 0;
        }
        if (!("NotebookID" in $$source)) {
            this["NotebookID"] = 0;
        }
        if (!("Content" in $$source)) {
            this["Content"] = "";
        }
        if (!("Title" in $$source)) {
            this["Title"] = "";
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = "";
        }
        if (!("ModifiedAt" in $$source)) {
            this["ModifiedAt"] = "";
        }
        if (!("Tags" in $$source)) {
            this["Tags"] = (new sql$0.NullString());
        }
        if (!("PublishedAt" in $$source)) {
            this["PublishedAt"] = (new sql$0.NullString());
        }
        if (!("EventID" in $$source)) {
            this["EventID"] = (new sql$0.NullString());
        }
        if (!("Notetype" in $$source)) {
            this["Notetype"] = "";
        }
        if (!("Filetype" in $$source)) {
            this["Filetype"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Trash instance from a string or object.
     */
    static createFrom($$source: any = {}): Trash {
        const $$createField7_0 = $$createType1;
        const $$createField8_0 = $$createType1;
        const $$createField9_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Tags" in $$parsedSource) {
            $$parsedSource["Tags"] = $$createField7_0($$parsedSource["Tags"]);
        }
        if ("PublishedAt" in $$parsedSource) {
            $$parsedSource["PublishedAt"] = $$createField8_0($$parsedSource["PublishedAt"]);
        }
        if ("EventID" in $$parsedSource) {
            $$parsedSource["EventID"] = $$createField9_0($$parsedSource["EventID"]);
        }
        return new Trash($$parsedSource as Partial<Trash>);
    }
}

// Private type creation functions
const $$createType0 = sql$0.NullInt64.createFrom;
const $$createType1 = sql$0.NullString.createFrom;
